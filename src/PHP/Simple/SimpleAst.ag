MODULE {PHP.Simple.SimpleAst}
{}

{
import Data.List
import qualified Data.Set as Set
import qualified Data.Map as Map
import qualified MF.Program as P
}

PRAGMA genlinepragmas

--Expressions
DATA Expression 
    | Assign    var:String exp:Expression  op:String
    | BinOp     left: Expression  op: String  right: Expression
    | UnaryOp   op: String exp: Expression
    
    | Const     value: String
    | Var       value: String
    
    | Func      name: String  args: ExpressionList
    | TernaryIf cond:Expression thn:Expression els:Expression
DERIVING Expression: Eq, Show

TYPE ExpressionList = [ Expression ]

SET Expressions = Expression ExpressionList

--Statements
DATA Statement    
    | Expr      exp:Expression  
    
    | If        exp:Expression thn:StatementList els:StatementList
    | While     exp:Expression block:StatementList
    | For       start:Expression stop:Expression inc:Expression block:StatementList

    | Break
    | Continue

    | FuncDef   name:String args:{[(String,Bool)]} block:StatementList
    | Return    exp:Expression
DERIVING Statement: Eq, Show

TYPE StatementList = [ Statement ]

SET Statements = StatementList Statement

--Data type to hide the internal functionality of the grammar (instead of complicated wrapper).
DATA Program    
    | Program   stats: StatementList

SET Inner      = Statements Expressions --Only inner part of the program (everything excpet top Program datatype).

SET All        = Inner Program --Entire program

ATTR All [|labels USE {`Map.union`} {Map.empty}: {Map.Map P.Label P.Statement} --Map of labels
          |entry : {P.Label}                      --Entry label to code block
           flow USE {++} {[]}: {[(Int,Int)]} --Accumulated flow graph
          ]    

ATTR Inner [exit   :{P.Label} --Holds value where to go when done with a block.            
            cont   :{P.Label} --P.Label where to go for continue
            break  :{P.Label} --P.Label where to go when brak
            funcs  :{Map.Map String (P.Label, P.Label)} --Defined functions 
           |labelcount:Int --Incrementor for labels
           |funcDefs USE {`Map.union`} {Map.empty} : {Map.Map String (P.Label, P.Label)} ] --Collect defined functions

--Unique labels for all in loc.label
SEM Statement
    | Expr If While Break Continue FuncDef Return For
        loc.label   : UNIQUEREF labelcount 
    | FuncDef
        loc.retLabel: UNIQUEREF labelcount 

SEM ExpressionList
    | Cons --Labels for replacement variables of function call arguments.
        loc.label   : UNIQUEREF labelcount 

SEM Expression    
    | BinOp UnaryOp Var Const Func Assign TernaryIf
        loc.label   : UNIQUEREF labelcount
    | Func --Additional label for the return statement
        loc.labelOut: UNIQUEREF labelcount          
    | TernaryIf
        loc.thenLabel: UNIQUEREF labelcount
        loc.elseLabel: UNIQUEREF labelcount


--Statements

--Statement  

SEM Statement
    | Expr      lhs.entry = @exp.entry --just pass through
                exp.exit  = @lhs.exit

    | While If Return --For these statements, first run the containing expression and then the command itself.
                lhs.entry   = @exp.entry
                exp.exit    = @loc.label

    | While     +labels = Map.insert @loc.label (P.While (P.Val . P.Var $ @exp.myvar))
                +flow   = ([(@loc.label, @lhs.exit) --To exit
                           ,(@loc.label, @block.entry)]++) --Flow to inner block
                block.exit  = @exp.entry --Set inherited attributes for while block
                block.cont  = @exp.entry
                block.break = @lhs.exit

    | For       +labels = Map.insert @loc.label (P.While (P.Val . P.Var $ @stop.myvar))
                +flow   = ([(@loc.label, @lhs.exit)
                           ,(@loc.label, @block.entry)]++)
                
                lhs.entry   = @start.entry --Wire expressions
                start.exit  = @stop.entry
                stop.exit   = @loc.label
                
                block.exit  = @inc.entry 
                block.cont  = @inc.entry
                block.break = @lhs.exit
                
                inc.exit    = @stop.entry

    | If        +labels = Map.insert @loc.label (P.If (P.Val . P.Var $ @exp.myvar))
                +flow   = ([(@loc.label, @thn.entry) --Add flow for then and else block
                           ,(@loc.label, @els.entry)]++)

    | Return    +labels = Map.insert @loc.label (P.Assign "@return" (P.Val . P.Var $ @exp.myvar) "")
                +flow   = ((@loc.label, @lhs.exit):) 

    | FuncDef   +labels = Map.union (Map.fromList [(@loc.label   , P.FuncIn @name (@args++[("@return",True)]))
                                                  ,(@loc.retLabel, P.Return)])
                +flow   = ((@loc.label, @block.entry):)
                            
                lhs.entry    = @lhs.exit --FuncDef = no-op (entry=exit)
                block.exit   = @loc.retLabel --A function block has no exit value
                +funcDefs    = Map.insert @name (@loc.label, @loc.retLabel)

    | Break Continue --Just run these statements
                lhs.entry   = @loc.label

    | Break     +labels = Map.insert @loc.label P.Break
    | Continue  +labels = Map.insert @loc.label P.Continue
    
--Wire the statements through a code block
SEM StatementList
    | Nil       lhs.entry   = @lhs.exit --On the end of the block, entry becomes exit.
    | Cons      lhs.entry   = @hd.entry --Wire the head to the rest of the block and make head the first
                hd.exit     = @tl.entry

--Expressions

--Expression
{-Replace functions with variables-}
ATTR Expression [||
                    myvar:{String}  --Variable containing inner expression
                  ]
ATTR ExpressionList [||varlist: {[String]}]   --List of vars generated for expression

SEM Expression    --Labels
    | BinOp UnaryOp Const Func TernaryIf
                loc.expvar  = "@"++show @loc.label       
    | BinOp Const Func TernaryIf
                lhs.myvar   = @loc.expvar

    | BinOp     +labels     = Map.insert @loc.label (P.Assign @loc.expvar (P.BinOp (P.Var @left.myvar) @op (P.Var @right.myvar)) "")
                +flow       = ((@loc.label, @lhs.exit):) --Flow through

                lhs.entry   = @left.entry --Wire through
                left.exit   = @right.entry
                right.exit  = @loc.label

    | UnaryOp   +labels     = Map.insert @loc.label $ unarySideEffect @exp.myvar @loc.expvar @op
                +flow       = ((@loc.label, @lhs.exit):) --Flow through
                lhs.entry   = @exp.entry
                exp.exit    = @loc.label
                lhs.myvar   = P.var $ unarySideEffect @exp.myvar @loc.expvar @op

    | Var       lhs.entry   = @lhs.exit --Wire through
                lhs.myvar   = @value               

    | Const     +labels     = Map.insert @loc.label (P.Assign @loc.expvar (P.Val .P.Const $ @value) "")
                +flow       = ((@loc.label, @lhs.exit):) --Flow through
                lhs.entry   = @loc.label

    | Assign    +labels     = Map.insert @loc.label (P.Assign @var (P.Val . P.Var $ @exp.myvar) @op)
                +flow       = ((@loc.label, @lhs.exit):) --Flow through
                lhs.entry   = @exp.entry --Wire through
                exp.exit    = @loc.label
                lhs.myvar   = @var --Represented by variable

    | Func      +labels   = Map.union (Map.fromList [( @loc.label   , P.FuncCall @name (@args.varlist ++ [@loc.expvar])), 
                                                     ( @loc.labelOut, P.FuncBack @name)])

                +flow   = ([(@loc.label, fst (Map.findWithDefault (-1,-1) @name @lhs.funcs))    --Call function
                           ,(snd (Map.findWithDefault (-1,-1) @name @lhs.funcs), @loc.labelOut) --Return from function
                           ,(@loc.labelOut, @lhs.exit) --Back to out flow
                           ,(@loc.label, @loc.labelOut)]++) --Call to Back flow
                
                lhs.entry   = @args.entry --Wire function call through aruments
                args.exit   = @loc.label 
    
    | TernaryIf +labels = Map.union (Map.fromList 
                            [( @loc.label, (P.If (P.Val . P.Var $ @cond.myvar)))
                            ,( @loc.thenLabel, (P.Assign @loc.expvar (P.Val . P.Var $ @thn.myvar) ""))
                            ,( @loc.elseLabel, (P.Assign @loc.expvar (P.Val . P.Var $ @els.myvar) ""))])
                +flow   = ([(@loc.label, @thn.entry) --Add flow for then and else block
                           ,(@loc.label, @els.entry)
                           ,(@loc.thenLabel, @lhs.exit)
                           ,(@loc.elseLabel, @lhs.exit)]++)

                lhs.entry   = @cond.entry
                cond.exit   = @loc.label                
                thn.exit    = @loc.thenLabel
                els.exit    = @loc.elseLabel

--Expression list
SEM ExpressionList --Labels
    | Nil       lhs.varlist = []
                lhs.entry   = @lhs.exit
                
            --Replace list arguments with placeholder variables and corresponding assignments
    | Cons      +varlist    = (@hd.myvar:) --Create list of replacement values
                lhs.entry   = @hd.entry
                hd.exit     = @tl.entry

--Range of influence
ATTR All [||roi USE {`Map.union`} {Map.empty}:{Map.Map P.Label (Set.Set P.Label)}]

SEM Statement
    | While     +roi = Map.insert @loc.label (Map.keysSet @block.labels)
    | For       +roi = Map.insert @loc.label (Map.keysSet @block.labels)
    | If        +roi = Map.insert @loc.label (Map.keysSet @thn.labels `Set.union` Map.keysSet @els.labels)
--    | FuncDef   +roi = Map.insert @loc.label (Set.fromList ((@loc.retLabel : Map.keys  @block.labels)))

SEM Expression
    | TernaryIf +roi = Map.insert @loc.label (Set.fromList 
                                            ([ @loc.thenLabel
                                             , @loc.elseLabel]
                                            ++ Map.keys @els.labels
                                            ++ Map.keys @thn.labels))
                                            

--Setup Program
SEM Program
    | Program   stats.funcs = @stats.funcDefs
                stats.exit  = -1
                stats.cont  = -1
                stats.break = -1
                stats.labelcount = 0

--Interprocedural flow
ATTR All [||ipf USE {++} {[]}: {[P.Ipf]}]

SEM Expression
    |Func +ipf = ((@loc.label
                  ,fst (Map.findWithDefault (-1,-1) @name @lhs.funcs)
                  ,snd (Map.findWithDefault (-1,-1) @name @lhs.funcs)
                  ,@loc.labelOut):)

{
--Convert unary to binary
unarySideEffect::String -> String -> String -> P.Statement
unarySideEffect v vn "++" = P.Assign v (P.Val (P.Const "1")) "+"
unarySideEffect v vn "--" = P.Assign v (P.Val (P.Const "1")) "-"
unarySideEffect v vn op   = P.Assign vn (P.UnaryOp (P.Var v) op) ""

nextUnique :: P.Label -> (P.Label, P.Label)
nextUnique u = (u+1, u)

inh::Inh_Program
inh = Inh_Program
      {labels_Inh_Program = Map.empty
      }

labels::Program -> Map.Map P.Label P.Statement
labels slist = labels_Syn_Program $ wrap_Program (sem_Program slist) inh

filterFlow::P.Flow -> P.Flow
filterFlow = filter (\(i,t) -> i /= -1 && t /= -1)

flow::Program -> [(P.Label,P.Label)]
flow slist = filterFlow $ flow_Syn_Program $ wrap_Program (sem_Program slist) inh

entry::Program -> P.Label
entry slist = entry_Syn_Program $ wrap_Program (sem_Program slist) inh

roi::Program -> Map.Map P.Label (Set.Set P.Label)
roi slist = roi_Syn_Program $ wrap_Program (sem_Program slist) inh

filterIpf::[P.Ipf] -> [P.Ipf]
filterIpf = filter (\(a,b,c,d) -> a /= -1 && b /= -1 && c /= -1 && d /= -1)

ipf::Program -> [P.Ipf]
ipf slist = ipf_Syn_Program $ wrap_Program (sem_Program slist) inh

program::Program -> P.Program
program p = let res = wrap_Program (sem_Program p) inh
            in P.Program
                {P.blocks = labels_Syn_Program res
                ,P.flow   = filterFlow $ flow_Syn_Program res
                ,P.startLabel  = entry_Syn_Program res
                ,P.finalLabels   = []
                ,P.rangeOfInfluence = roi_Syn_Program res
                ,P.interProceduralFlow = filterIpf $ ipf_Syn_Program res}

}
