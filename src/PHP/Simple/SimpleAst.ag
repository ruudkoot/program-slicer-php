MODULE {PHP.Simple.SimpleAst}
{}

{
import Data.List
import qualified Data.Set as S
import qualified Data.IntMap as IM
import qualified Data.Map as M
import qualified EmbellishedMonotoneFramework.Program as P
import Debug.Trace
}

PRAGMA genlinepragmas

--Expressions
DATA Expression 
    | BinOp     left: Expression  op: String  right: Expression
    | UnaryOp   op: String exp: Expression
    | Const     value: String
    | Var       value: String
    | Func      name: String  args: ExpressionList
DERIVING Expression: Eq, Show

TYPE ExpressionList = [ Expression ]

SET Expressions = Expression ExpressionList



--Statements
DATA Statement
    | Assign    var:String exp:Expression
    | Expr      exp:Expression  
    
    | If        exp:Expression thn:StatementList els:StatementList
    | While     exp:Expression block:StatementList
    | Break
    | Continue

    | FuncDef   name:String args:{[String]} block:StatementList
    | Return    exp:Expression
DERIVING Statement: Eq, Show

TYPE StatementList = [ Statement ]

SET Statements = StatementList Statement

DATA Program    
    | Program   stats: StatementList

SET Inner      = Statements Expressions

SET All        = Inner Program

--Labelnumbers
ATTR Inner [|labelcount:Int|] --Accumulator for labels

SEM Expression    
    | BinOp UnaryOp Var Const Func
        loc.label   : UNIQUEREF labelcount
    | Func
        loc.labelOut: UNIQUEREF labelcount

SEM ExpressionList
    | Cons
        loc.label   : UNIQUEREF labelcount

SEM Statement
    | Assign Expr If While Break Continue FuncDef Return
        loc.label   : UNIQUEREF labelcount        

--SimpleExp
{-Replace functions with variables-}
ATTR Expression [||simpleExp:{P.Expression}]

SEM Expression
    | BinOp   lhs.simpleExp = P.BinOp @left.simpleExp @op @right.simpleExp
    | UnaryOp lhs.simpleExp = P.UnaryOp @op @exp.simpleExp
    | Var     lhs.simpleExp = P.Var @value
    | Const   lhs.simpleExp = P.Const @value
    | Func    loc.funcVar   = "$_" ++ show @loc.labelOut
              lhs.simpleExp = P.Var @loc.funcVar

--Labels
ATTR All [|labels USE {`IM.union`} {IM.empty}: {IM.IntMap P.Statement}|]
ATTR ExpressionList [||varlist: {[String]}]
ATTR Expression [||myvar: String]

SEM Statement
    | Assign    +labels = IM.insert @loc.label (P.Assign @var @exp.simpleExp)
    | Expr      +labels = IM.insert @loc.label (P.Expr @exp.simpleExp)

    | If        +labels = IM.insert @loc.label (P.If @exp.simpleExp)
    | While     +labels = IM.insert @loc.label (P.While @exp.simpleExp)
    | Break     +labels = IM.insert @loc.label P.Break
    | Continue  +labels = IM.insert @loc.label P.Continue
    
    | FuncDef   +labels = IM.insert @loc.label (P.FuncIn @name @args)
    | Return    +labels = IM.insert @loc.label (P.Return @exp.simpleExp)

SEM ExpressionList
    | Nil       lhs.varlist = []
    | Cons      +labels = IM.insert @loc.label (P.Assign @hd.myvar @hd.simpleExp)
                +varlist= (@hd.myvar:)

SEM Expression
    | BinOp UnaryOp Var Const Func
                lhs.myvar = "$_"++show @loc.label
    | Func      +labels   = IM.union (IM.fromList [( @loc.label   , P.FuncCall @name @args.varlist), 
                                                   ( @loc.labelOut, P.FuncBack @name @loc.funcVar)])

--Used variables
ATTR All [|| vars USE {`S.union`} {S.empty}: {S.Set String}]

SEM ExpressionList
    | Cons      +vars = S.insert @hd.myvar

SEM Expression
    | Var       lhs.vars = S.singleton @value
    | Func      lhs.vars = S.fromList (("$_" ++ show @loc.labelOut): @args.varlist)

SEM Statement
    | Assign    +vars = S.insert @var    
    | FuncDef   +vars = S.union (S.fromList @args)

--Fix entries and exits for blocks

--Denotes entrance of a block
ATTR Inner [exit   :Int --Holds value where to go when done.            
            cont   :Int
            break  :Int
            inFunc :String
           ||]
          
ATTR All   [||entry :Int]

SEM StatementList
    | Nil       lhs.entry   = @lhs.exit 
    | Cons      lhs.entry   = @hd.entry
                hd.exit     = @tl.entry

SEM ExpressionList
    | Nil       lhs.entry   = @lhs.exit
    | Cons      lhs.entry   = @loc.label
                hd.exit     = @tl.entry

SEM Statement
    | Break Continue --Just wire through
                lhs.entry   = @loc.label
    
    | Assign Expr While If Return --Wire through expression
                lhs.entry   = @exp.entry
                exp.exit    = @loc.label

    | While     block.exit  = @loc.label
                block.cont  = @exp.entry
                block.break = @exp.entry

    | FuncDef   lhs.entry    = @lhs.exit
                block.exit   = -1
                block.inFunc = @name

SEM Expression    
    | Func      lhs.entry   = @args.entry
                args.exit   = @loc.label                 

    | Const Var lhs.entry   = @lhs.exit

--Create functions
ATTR Inner [defs: {M.Map String Int}
            rets: {M.Map String [Int]}||]

{-Calculate flow-}
--Denotes entrance of a block
ATTR All [||flow USE {++} {[]}: {[(Int,Int)]}]
            

SEM Statement       
    | Assign Expr While
                +flow   = ((@loc.label, @lhs.exit):)
    | If        +flow   = ([(@loc.label, @thn.entry)
                           ,(@loc.label, @els.entry)]++)    
    | While     +flow   = ((@loc.label, @block.entry):)
    | FuncDef   +flow   = ((@loc.label, @block.entry):)
    | Return    +flow   = ((map (\to -> (@loc.label, to)) (M.findWithDefault [] @lhs.inFunc @lhs.rets))++)

SEM Expression    
    | Func      +flow   = ([(@loc.label, M.findWithDefault (-1) @name @lhs.defs)
                           ,(@loc.labelOut, @lhs.exit)
                           ,(@loc.label, @loc.labelOut)]++)

SEM ExpressionList
    | Cons      +flow   = ((@loc.label, @tl.entry):)


--Setup Program
SEM Program
    | Program   stats.defs  = defMap @stats.labels
                stats.rets  = retMap @stats.labels
                stats.exit  = -1
                stats.cont  = -1
                stats.break = -1
                stats.labelcount = 0
                stats.inFunc = "main"          
{

defMap :: IM.IntMap P.Statement -> M.Map String Int
defMap = foldr f M.empty . IM.toList
    where f (i, P.FuncIn n as) m = M.insert n i m
          f _                  m = m

retMap :: IM.IntMap P.Statement -> M.Map String [Int]
retMap = foldr f M.empty . IM.toList
    where f (i, P.FuncBack n as) m = M.insertWith (++) n [i] m
          f _                    m = m

nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

inh::Inh_Program
inh = Inh_Program
      {labels_Inh_Program = IM.empty
      }

usedVars::Program -> S.Set String
usedVars slist = vars_Syn_Program $ wrap_Program (sem_Program slist) inh

labels::Program -> IM.IntMap P.Statement
labels slist = labels_Syn_Program $ wrap_Program (sem_Program slist) inh

filterFlow::[(Int,Int)] -> [(Int,Int)]
filterFlow = filter (\(i,t) -> i /= -1 && t /= -1)

flow::Program -> [(Int,Int)]
flow slist = filterFlow $ flow_Syn_Program $ wrap_Program (sem_Program slist) inh

entry::Program -> Int
entry slist = entry_Syn_Program $ wrap_Program (sem_Program slist) inh

{-

inh::Inh_StatementList
inh = Inh_StatementList
      { labelcount_Inh_StatementList = 0
      , labels_Inh_StatementList = IM.empty
      , exit_Inh_StatementList = 9999
      , ret_Inh_StatementList = 0
      , cont_Inh_StatementList = 0
      , break_Inh_StatementList = 0
      }

usedVars::StatementList -> S.Set String
usedVars slist = vars_Syn_StatementList $ wrap_StatementList (sem_StatementList slist) inh

labels::StatementList -> IM.IntMap P.Statement
labels slist = labels_Syn_StatementList $ wrap_StatementList (sem_StatementList slist) inh

flow::StatementList -> [(Int,Int)]
flow slist = flow_Syn_StatementList $ wrap_StatementList (sem_StatementList slist) inh

entry::StatementList -> Int
entry slist = entry_Syn_StatementList $ wrap_StatementList (sem_StatementList slist) inh

expFreeVars::Expression -> S.Set String
expFreeVars exp = vars_Syn_Expression $ wrap_Expression (sem_Expression exp) Inh_Expression

expFuncs::Expression -> S.Set String
expFuncs exp = funcs_Syn_Expression $ wrap_Expression (sem_Expression exp) Inh_Expression
-}
}
